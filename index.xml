<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目介绍 on SuperSonic</title>
    <link>https://supersonicbi.github.io/</link>
    <description>Recent content in 项目介绍 on SuperSonic</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://supersonicbi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>助理管理</title>
      <link>https://supersonicbi.github.io/docs/chat-bi/%E5%8A%A9%E7%90%86%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/chat-bi/%E5%8A%A9%E7%90%86%E7%AE%A1%E7%90%86/</guid>
      <description> 助理管理 # </description>
    </item>
    <item>
      <title>构建模型</title>
      <link>https://supersonicbi.github.io/docs/headless-bi/%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/headless-bi/%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B/</guid>
      <description>构建模型 # 构建语义模型是使用SuperSonic的第一步。在这个模块中, 它可以连接上你的数据库引擎, 并通过简单方便的方式来帮助你将物理数据建模为维度和指标等逻辑概念。建模完成后, 你就可以在问答中通过自然语言的方式来和你的物理数据交互啦~&#xA;问题示例&#xA;为了帮助你更好地理解建模的过程, 我们通过一个问题示例来进行介绍: SuperSonic本身作为一个产品, 那么如何用语义建模来统计它的埋点访问数据呢？比如SuperSonic在一段时间内的访问用户数是多少？这些用户的访问次数和停留时长是怎样的？这些用户来自哪些部门？这些用户看了哪些页面？分别看了多少次？等我们建模完成, 这些问题的答案也就浮出水面了。&#xA;1. 创建一个数据库链接 # 在开始探索之前, 你首先需要创建一个数据库链接来连接你的数据库, 以便后续获取数据。在SuperSonic中，主要支持JDBC类型的数据库链接，创建一个数据库连接主要分为 以下三个步骤:&#xA;填写连接信息 点击测试连接, 若连接测试通过, 则可点击保存。否则, 返回步骤1 点击保存。 如图1-1所示, 由于SuperSonic的埋点访问数据被存放在H2数据库中, 因此我们创建了一个H2数据库实例作为例子。除了H2数据库以外, 我们还支持MySQL, ClickHouse, PG等多种常见数据库。&#xA;需要说明的是, 在这里创建数据库之后, 并不是所有人都可以查询这个数据库链接的数据, 需要在图2-1表单上进行授权。&#xA;管理员: 可以编辑这个数据库链接的人&#xA;使用者: 可以使用这个数据库链接查询数据的人&#xA;2. 创建一个主题域和模型集 # 接下来, 用户可以按自己的业务场景去创建主题域, 然后在主题域下面创建具体的模型集。如图2-1所示, 为了统计SuperSonic的埋点访问情况, 我们创建了一个叫&amp;quot;超音数&amp;quot;的主题域以及基于SuperSonic的埋点数据创建了一个&amp;quot;埋点模型集&amp;quot;:&#xA;3. 创建数据模型 # 创建好了一个模型集后, 我们就可以把物理数据抽象为一个个数据模型并创建到模型集下。在SuperSonic中, 数据模型是对数据库中数据的一种逻辑层面上的抽象, 它既可以直接指代一张物理表, 也可以由一段SQL逻辑表示而成。数据模型中涉及的字段可被指定为维度或者度量, 而这些维度和度量又可以衍生出更复杂的维度和指标。如图3-1, 超音数提供了两种创建数据模型的方式。&#xA;其中, 快速创建 可以直接指定一张物理表来把它创建为数据模型, 而SQL脚本 则提供了更为灵活的数据模型创建方式, 我们可以通过写一条逻辑SQL来把它指定为数据模型&#xA;如图3-2为通过SQL脚本的方式创建数据模型, 首先需要我们填写一些基本信息, 如数据模型名称和描述。&#xA;然后我们写一条SQL来表达我们的数据模型逻辑, 然后点击运行, 就可以看到这条SQL查询出来的数据, 校验数据无误之后, 我们可以点击生成数据模型, 需要注意的是, 这里创建数据模型选择数据库链接的时候, 需要有数据库的使用者权限.</description>
    </item>
    <item>
      <title>编译构建</title>
      <link>https://supersonicbi.github.io/docs/%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/</guid>
      <description> 构建构建 # SuperSonic为二次开发提供两种编译构建方式：&#xA;在开发调试场景，直接从本地IDE启动； 在开发部署场景，从源代码编译打包启动。 本地IDE启动 # 后端与webapp共同部署 # sh assembly/bin/supersonic-build.sh webapp 执行构建webapp IDE本地启动Java类com.tencent.supersonic.StandaloneLauncher http://localhost:9080 前后端分开启动的方式 # IDE本地启动Java类StandaloneLauncher 进入webapp目录，执行sh start-fe-dev.sh直接启动前端服务 http://localhost:9000 注意这里是9000端口 源代码编译包启动 # 下载相应版本source code 执行编译脚本：sh assembly/bin/supersonic-build.sh 编译完成后从assembly/build目录获取release包 解压zip包，执行启动脚本sh bin/supersonic-daemon.sh start 访问浏览器：http://localhost:9080 附加说明 # Windows环境均有提供对应的bat脚本, 执行即可。 Ubuntu环境, 启动方式同上, 若出现报错, 可尝试https://support.huaweicloud.com/intl/zh-cn/deployman_faq/deployman_faq_1016.html。 启动之后, 可以到logs目录下查看日志，确认启动正常。 </description>
    </item>
    <item>
      <title>快速体验</title>
      <link>https://supersonicbi.github.io/docs/%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C/</guid>
      <description>快速体验 # SuperSonic内置用于DEMO的语义模型和智能助理，因而只需要以下三步即可快速体验。&#xA;启动系统 # 下载相应版本release包 解压zip包，执行启动脚本：sh bin/supersonic-daemon.sh start 访问浏览器：http://localhost:9080 配置LLM # 进入菜单“助理管理”，选择系统内置的DEMO助理“算指标” 点击“修改信息”，选择“大模型配置”，填入自己申请的大模型服务信息，包括“Model Name”、“Base URL”以及&amp;quot;API Key&amp;quot; 点击“确定”，保存助理大模型配置 问题对话 # 进入菜单“问答对话”，选择智能助理“算指标”&#xA;点击“新对话”，输入问题“近半个月sales部门访问量最高的用户是谁”&#xA;点击&amp;quot;LLM解析S2SQL&amp;quot;可以查看大模型生成的SQL</description>
    </item>
    <item>
      <title>指标管理</title>
      <link>https://supersonicbi.github.io/docs/headless-bi/%E6%8C%87%E6%A0%87%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/headless-bi/%E6%8C%87%E6%A0%87%E7%AE%A1%E7%90%86/</guid>
      <description>指标管理 # 在上一篇创建模型中，我们已经展示了如何在创建模型的时候通过快速创建的方式来创建指标。 接下来，我们继续展示下如何通过手动自定义的方式来创建指标。 创建出来后，通过进一步进行下钻维度等配置，就可以在指标市场查看这几个指标的基本数据情况啦。&#xA;在创建新的指标之前，我们首先看看访问次数这个指标的定义。如图，访问次数这个指标是在创建模型时通过快速创建的方式创建出来的，已经初始化了名称等基本信息。 上面表格中除了基本的名称信息以外，还包括:&#xA;别名: 别名是这个指标的其它名称，如访问次数这个指标又可以被称为PV。&#xA;分类: 分类是对这个指标的描述，如访问次数这个指标可被归类为核心指标，访问相关指标等。&#xA;敏感度：默认为普通。敏感度为核心的指标会有权限控制，具体会在权限篇进行详细介绍。&#xA;下钻维度：即这个指标可与哪些维度来下钻。配置了之后，这个指标在进行查询时，就只能根据这几个维度进行下钻。这个配置会作用到指标主页以及问答的推荐维度。&#xA;数据格式化: 即在查询出这个指标数据后，对指标数据格式进行可视化，如图，可以将它格式化为小数以及百分数。&#xA;根据以上介绍，我们来对访问次数这个指标进行信息补充，具体如下：&#xA;如图，除了补充别名和标签以外，我们还补充好了下钻维度信息，表示这个指标可根据部门和用户这两个维度来进行下钻查询。需要注意的是，可配置的下钻维度不仅仅来自指标当前模型，还可来自与该模型有关联关系的模型。&#xA;接下来，我们来查看它的表达式信息。可以看到，我们一共提供了三种创建指标的模式：按度量，按指标，按字段。而访问次数这个指标通过快速创建的方式创建出来，默认的模式为按度量。 选中s2_pv_uv_statis_pv这个度量并在下面的表达式框中直接填写s2_pv_uv_statis_pv， 表明这个指标是通过s2_pv_uv_statis_pv直接创建而来。需要注意的是，s2_pv_uv_statis_pv这个度量名字是由模型英文名s2_pv_uv_statis和字段pv拼接而成， 且由于在创建模型的时候已经指定了聚合方式为SUM了，所以这里的表达式无需再填写聚合函数。&#xA;以上，我们就介绍完了访问次数这个指标包含的基本信息以及它的表达式定义。接下来，我们开始来通过按指标和按字段两种模式来创建新的指标: 访问用户数和人均访问次数。&#xA;首先，我们来创建访问用户数。如图，我们补充好了访问用户数的基本信息，并给它添加了一个别名：UV。&#xA;然后，我们来配置下访问用户数的下钻维度，可以看到，我们选中了部门这个维度作为它的下钻维度，并勾选了绑定。绑定的含义是我们在查询这个指标时，必须配合这个维度来进行查询，否则提示缺少下钻维度。&#xA;最后，我们来选择按字段的方式来进行表达式的定义，这些字段来自当前模型。可以看到我们选择了user_id这个字段来创建指标，并定义了字段表达式。由于字段上不包含聚合函数，因此需要在写表达式的时候指定聚合函数。&#xA;点击完成之后，我们就完成了访问用户数这个指标的定义。最后，我们来创建人均访问次数这个指标，由于基本信息的补充都基本类似，就不再介绍啦。我们选择按指标的模式来定义表达式，通过分析，人均访问次数这个指标可由访问次数和访问用户数这两个指标结合起来创建。因此，如下图我们选中了访问次数和访问用户数这两个指标，并通过pv/uv的方式来表达人均访问次数。&#xA;到这里，我们就完成了所有指标的创建了。我们可以点击顶部指标市场TAB来看下目前系统中一共有哪些指标。在指标市场这个页面中，不仅可以支持按自然语言的方式对指标进行检索，也可以对指标进行收藏，便于下次查找。&#xA;最后，让我们点击具体的指标，进入到指标的详情页。如图，我们进入到访问次数这个指标的详情页，可以看到它的基本信息以及具体数据趋势和表格明细。同时，还可以根据我们刚刚配置的下钻维度来对指标数据进行下钻和过滤。访问用户数和停留时长等指标数据也是同理可查看。并且，若需要对数据进行下载离线分析，可直接点击下载按钮进行下载即可。&#xA;到这里，超音数产品的相关指标就都创建出来啦!</description>
    </item>
    <item>
      <title>插件管理</title>
      <link>https://supersonicbi.github.io/docs/chat-bi/%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/chat-bi/%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/</guid>
      <description> 插件管理 # </description>
    </item>
    <item>
      <title>配置DB</title>
      <link>https://supersonicbi.github.io/docs/%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AEdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AEdb/</guid>
      <description> 配置DB # 系统默认使用H2内存数据库, 重启后会丢失数据, 若需要替换为自己的MySQL, 请按以下进行配置:&#xA;1. 执行SQL脚本 # 初次配置DB请依次执行conf/db下schema-mysql.sql、 data-mysql.sql, 这两个脚本均为最新表结构&#xA;若是已配置过DB并部署好的服务, 可参考sql-update.sql, 这里会注明每次功能改动需要改动的表结构&#xA;2. 配置YAML文件 # conf下application-local.yaml中默认的DB配置为H2配置, 替换为自己的MySQL即可&#xA;spring: datasource: url: jdbc:mysql://localhost:3306/your_database?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false username: your_username password: your_password driver-class-name: com.mysql.jdbc.Driver </description>
    </item>
    <item>
      <title>配置LLM</title>
      <link>https://supersonicbi.github.io/docs/%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AEllm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2/%E9%85%8D%E7%BD%AEllm/</guid>
      <description> 配置LLM # Text2SQL模型 # SuperSonic可以从两个粒度配置LLM：&#xA;系统粒度：修改配置文件conf/supersonic-env.sh，替换相应的变量 助理粒度：在助理管理模块，修改助理配置，填入相应的变量 Embedding模型 # </description>
    </item>
    <item>
      <title>项目架构</title>
      <link>https://supersonicbi.github.io/docs/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/</guid>
      <description>项目架构 # 架构图 # 核心组件 # Knowledge Base： 定期从语义模型中提取相关的模式信息，构建词典和索引，以便后续的模式映射。&#xA;Schema Mapper： 将自然语言文本在知识库中进行匹配，为后续的语义解析提供相关信息。&#xA;Semantic Parser： 理解用户查询并抽取语义信息，生成语义查询语句S2SQL。&#xA;Semantic Corrector： 检查语义查询语句的合法性，对不合法的信息做修正和优化处理。&#xA;Semantic Translator： 将语义查询语句翻译成可在物理数据模型上执行的SQL语句。&#xA;Chat Plugin： 通过第三方工具扩展功能。给定所有配置的插件及其功能描述和示例问题，大语言模型将选择最合适的插件。</description>
    </item>
    <item>
      <title>FAQ</title>
      <link>https://supersonicbi.github.io/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://supersonicbi.github.io/docs/faq/</guid>
      <description>FAQ # 项目有没有体验的地址？ # A: Playground访问地址：http://117.72.46.148:9080&#xA;初始启动后为什么能显示DEMO问答对话？ # A: 为了便于快速体验，系统内置DEMO语义模型，且实现了基于规则的解析器，所以不需要大模型也可以进行问答对话。不过，规则解析器能力有限，推荐仅用于测试验证，生产使用还是需要大模型解析。&#xA;是否自带大模型服务？ # A: 项目内置langchain4j社区提供的demo API key，但单次请求openai大模型限制在1000 token，因而只能用于快速体验。要正常体验问答对话，请自行申请大模型服务。&#xA;支持哪些大模型服务？ # A: 当前主要支持兼容open_ai接口协议的大模型服务，比如GPT、GLM、DeepSeek、Qwen、Moonshot等。文心和混元正在验证中，敬请期待。&#xA;是否支持文本知识库？ # A: 当前主要聚焦于结构化数据的问答，文本数据将在未来版本加入支持。&#xA;是否支持多轮对话？ # A: 自0.9.2版本起已经支持多轮对话，但默认是关闭的，需要在助理配置里开启。</description>
    </item>
  </channel>
</rss>
